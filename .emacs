;;; -* lexical-binding: t -*-

(require 'package)
(require 'cl-lib)

(package-initialize)

(defgroup my-customizations nil "all `defcustom' forms in my own init scripts")

(defconst init-home-folder-dir (file-truename user-emacs-directory))

(setq backup-directory-alist `(("." . ,(concat init-home-folder-dir "backup-files/")))
      undo-tree-history-directory-alist `(("." . ,(concat init-home-folder-dir "undo-tree-history/"))))

(defgroup my-errors nil
  "`defcustom' group for error handling in my own emacs lisp code."
  :group 'my-customizations)

(define-error 'my-errors "Errors in my own emacs lisp code.")
(define-error
  'my-init-error "Error in my personal emacs initialization." 'my-errors)

;; starts emacs in server form so i can use emacsclient to add files
;; but only if server isn't already started
(require 'server)
(when (fboundp 'server-running-p)
  (unless (server-running-p)
    (server-start)))

(defun load-my-script (fname &optional dir)
  (load-file (expand-file-name
              (format "%s/%s.el" (or dir ".") fname)
              init-home-folder-dir)))

;;; load the packages i like
(load-my-script "packages" "init-scripts")

;;; load elisp
;;; should be /after/ byte-recompilation
(load-my-script "requires" "init-scripts")

;;; load all my cool functions!!!
(load-my-script "functions" "utils")

;;; for compatibility between different operating environments
(load-my-script "compat" "init-scripts")

;;; Interact with package variables outside of `defcustom's.
(load-my-script "package-setup" "init-scripts")

;;; enforce my strong opinions on the default emacs ui
(load-my-script "interface" "init-scripts")
;;; do some additional work to setup packages
(load-my-script "package-setup" "init-scripts")
;;; load (programming) language-specific settings
(load-my-script "languages" "init-scripts")
;;; cause what else is emacs for
(load-my-script "keybindings" "init-scripts")

;;; make it look nice
(load-my-script "visuals" "init-scripts")

;;; load submodules!!!!
(setup-submodules-load)

;;; This just seems like a nice idea.
(add-hook 'after-init-hook #'garbage-collect)

(add-hook 'kill-emacs-hook (z (clean-nonvisiting-buffers t)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(coffee-command
   "~/tools/coffeescript/invoke-coffeescript.zsh")
 ;; '(custom-safe-themes
 ;;   '(default "bce8a104ed35b6d5f5e11ade5e4a5eeb9e82caf50e458f6f4a8722951de21ee0"))
 ;; '(display-buffer-alist
 ;;   '(("\\*Async Shell Command\\*.*" display-buf-no-win-save-shell-command-buf)))
 '(gc-cons-threshold 2000000000)
 '(grep-command "gr ")
 '(grep-highlight-matches 'auto)
 '(grep-use-null-device nil)
 '(gud-key-prefix [3 134217737])
 '(haskell-check-command "hlint")
 '(haskell-process-type 'cabal-repl)
 '(haskell-tags-on-save t)
 '(js2-global-externs '("history" "getComputedStyle"))
 '(js2-include-node-externs t)
 '(kill-buffer-trash-alist
   '((markdown-mode lambda
                    (f)
                    (concat
                     (file-name-sans-extension f)
                     ".html"))
     (coffee-mode lambda
                  (f)
                  (concat
                   (file-name-sans-extension f)
                   ".js"))
     (java-mode lambda
                (f)
                (concat
                 (file-name-sans-extension f)
                 ".class"))
     (csharp-mode lambda
                  (f)
                  (file-name-sans-extension f))
     (c++-mode lambda
               (f)
               (file-name-sans-extension f))
     (c-mode lambda
             (f)
             (file-name-sans-extension f))))
 '(latex-engine "lualatex")

 '(minibuffer-line-format '((:eval (get-a-nice-updating-time-display))))
 '(minibuffer-line-mode t)
 '(minibuffer-line-refresh-interval 1)
 '(minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
 '(mode-require-final-newline t)
 '(mouse-autoselect-window nil)
 '(multi-isearch-search nil)
 '(my-isearch-search-fun 'do-normal-isearch)
 '(my-loc-lib-do-on-result '(find-file))
 '(next-line-add-newlines t)
 '(ns-alternate-modifier 'super)
 '(ns-command-modifier 'meta)
 '(nxml-slash-auto-complete-flag t)
 '(org-agenda-files nil)
 '(org-agenda-property-list ''("CUSTOM_ID"))
 '(org-catch-invisible-edits 'smart)
 '(org-confirm-babel-evaluate nil)
 '(org-enforce-todo-checkbox-dependencies t)
 '(org-enforce-todo-dependencies t)
 '(org-highlight-latex-and-related '(native latex script entities))
 '(org-link-elisp-confirm-function 'y-or-n-p)
 '(org-link-from-user-regexp nil)
 '(org-link-shell-confirm-function 'y-or-n-p)
 '(org-list-allow-alphabetical t)
 '(org-pretty-tags-mode-lighter "/$$$")
 '(org-src-fontify-natively t)
 '(org-startup-folded t)
 '(org-support-shift-select 'always)
 '(org-use-property-inheritance t)
 '(orgit-log-save-arguments t)
 '(pabbrev-idle-timer-verbose nil)
 '(pabbrev-minimal-expansion-p t)
 '(pabbrev-mode-hook '(pabbrev-mode-set-explicitly))
 '(package-selected-packages
   '(strace-mode dhall-mode minibuffer-line niceify-info python-info bart-mode info-buffer info-colors info-rename-buffer inform lsp-mode rustic smart-compile udev-mode undo-tree smart-tab company-nixos-options helm-nixos-options nix-buffer nix-env-install nix-mode nix-sandbox nix-update nixos-options nixpkgs-fmt pretty-sha-path w3m pabbrev origami-predef origami org-treeusage org-translate org-table-comment org-randomnote org-random-todo org-radiobutton org-pretty-tags org-pdftools ob-coffeescript ob-rust org-edna org-beautify-theme helpful grip-mode sysctl orgit orgnav org-agenda-property ess-R-data-view ess-r-insert-obj ess-smart-equals ess-smart-underscore ess-view ess-view-data helm-R cmake-font-lock cl-lib-highlight faceup lisp-local modern-fringes modern-sh unicode-math-input unicode-progress-reporter unicode-whitespace diredfl diredful dynamic-fonts emoji-fontset font-lock-profiler font-utils fontawesome fontify-face highlight-refontification lisp-extra-font-lock magic-latex-buffer modern-cpp-font-lock morlock preproc-font-lock propfont-mixed proportional simple-call-tree unicode-fonts use-ttf all-the-icons all-the-icons-dired all-the-icons-gnus all-the-icons-ibuffer all-the-icons-ivy all-the-icons-ivy-rich mediawiki 0blayout 2048-game ag auctex bazel-mode better-defaults cider cl-lib cloc cmake-mode color-theme-approximate color-theme-modern company company-ghc company-ghci csv-mode cuda-mode dired-sidebar dockerfile-mode ein enh-ruby-mode epresent espuds ess evil f3 flycheck-package flycheck-rust font-lock-studio ggtags ghc git-gutter git-gutter-fringe gnuplot gnuplot-mode go-mode graphql-mode groovy-mode helm-ag helm-gtags helm-swoop highlight-parentheses highlight-quoted highlight-stages ibuffer-sidebar intero jq-mode js2-mode kotlin-mode less-css-mode linum-relative literate-coffee-mode lua-mode magit-popup markdown-mode matlab-mode minimap mmm-mode multiple-cursors nhexl-mode nim-mode org pacmacs paredit pcre2el pdf-tools php-mode polymode poly-R projectile protobuf-mode rainbow-delimiters rainbow-mode robe rust-mode sage-shell-mode sass-mode scala-mode scrooge shm shut-up skewer-mode slime-company smartrep sml-mode solarized-theme sourcemap speech-tagger thrift toml-mode typescript-mode use-package vimrc-mode visual-fill-column web-beautify web-mode wgrep wgrep-ag wgrep-helm xterm-color yaml-mode))
 '(pcmpl-x-ack-program "(executable-find \"rg\")")
 '(pcomplete-autolist t)
 '(pcomplete-compare-entry-function 'file-newer-than-file-p)
 '(pcomplete-expand-before-complete t)
 '(pcomplete-file-ignore "\\.Xauthority\\'")
 '(pcomplete-help nil)
 '(pcomplete-recexact t)
 '(pcomplete-termination-string "")
 '(perl6-indent-offset 2)
 '(python-indent-def-block-scale 1)
 '(rainbow-ansi-colors t)
 '(rainbow-html-colors t)
 '(rainbow-latex-colors t)
 '(rainbow-r-colors t)
 '(rainbow-x-colors t)
 '(read-buffer-completion-ignore-case t)
 '(read-file-name-completion-ignore-case t)
 '(read-quoted-char-radix 10)
 '(require-final-newline t)
 '(rust-indent-offset 2)
 '(safe-local-variable-values
   '((highlight-80+-columns . 100)
     (highlight-stages-mode)
     (highlight-sexp-mode)
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :inherit bold-italic :background "white" :box t :weight ultra-bold)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :inherit bold-italic :background "white" :box t)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :inherit bold-italic :background "white" :underline t)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :inherit bold-italic :background "white" :underline t :family "dejavu serif mono")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :inherit bold-italic :family "dejavu serif mono")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :face bold-italic :family "dejavu serif mono")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "navy" :background "aquamarine" :weight bold :slant oblique :family "dejavu serif mono")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "navy" :background "aquamarine" :box t :weight bold :slant oblique :family "dejavu serif mono")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "navy" :background "aquamarine" :box t :weight bold :family "dejavu serif mono")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "navy" :background "aquamarine" :box t :weight bold :family "dejavu sans mono")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "navy" :background "aquamarine" :box t :weight bold :height 100)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "navy" :background "aquamarine")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "navy" :background "aquamarine" :box t :weight bold)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "chartreuse" :box t :weight bold :slant oblique)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "chartreuse" :box t :weight bold)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "chartreuse" :box t :weight "heavy")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "SkyBlue" :box t :weight "heavy")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#223fff" :box t :weight "heavy")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#223" :box t :weight "heavy")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#223" :box t :background "green")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#33ffff" :box t :background "ForestGreen")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#33ffff" :box t :background "green")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "#ffaabb" :slant oblique)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#33ffff" :box t :weight "black")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "magenta" :weight bold)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#33ffff" :box t :weight "black")
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "magenta" :weight bold)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic :overline t)
      ("FEASIBLE" :foreground "#00ccff" :weight heavy)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "magenta" :weight bold)
      ("PLAUSIBLE" :foreground "yellow" :underline t :background "red")
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic)
      ("FEASIBLE" :foreground "#00ccff" :weight heavy)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (org-todo-keyword-faces
      ("UNCLEAR" :foreground "red" :box t :weight light)
      ("RESEARCH" :foreground "magenta" :weight bold)
      ("PLAUSIBLE" :foreground "yellow" :underline t)
      ("PROOFOFCONCEPT" :foreground "PaleGreen" :weight bold :slant italic)
      ("FEASIBLE" :foreground "#00ccff" :weight heavy)
      ("MAINTAINABLE" :foreground "#22aa11" :strike-through t))
     (highlight-80+-mode)
     (TeX-auto-untabify . t)
     (comment-start . //)
     (f3-default-directory . /home/cosmicexplorer/projects/active/ping-pong)
     (f3-before-args "-not" "(" "-ipath" "*.git/*" "-or" "-ipath" "*.pants.d/*" "-or" "-iname" "*.pyc" ")")
     (f3-default-directory . project)
     (c-file-offsets
      (block-close . 0)
      (brace-list-close . 0)
      (brace-list-entry . 0)
      (brace-list-intro . +)
      (case-label . 0)
      (class-close . 0)
      (defun-block-intro . +)
      (defun-close . 0)
      (defun-open . 0)
      (else-clause . 0)
      (inclass . +)
      (label . 0)
      (statement . 0)
      (statement-block-intro . +)
      (statement-case-intro . +)
      (statement-cont . +)
      (substatement . +)
      (topmost-intro . 0))
     (markdown-list-indent-width . 2)
     (markdown-enable-math . t)
     (c-offsets-alist
      (inexpr-class . +)
      (inexpr-statement . +)
      (lambda-intro-cont . +)
      (inlambda . c-lineup-inexpr-block)
      (template-args-cont c-lineup-template-args +)
      (incomposition . +)
      (inmodule . +)
      (innamespace . +)
      (inextern-lang . +)
      (composition-close . 0)
      (module-close . 0)
      (namespace-close . 0)
      (extern-lang-close . 0)
      (composition-open . 0)
      (module-open . 0)
      (namespace-open . 0)
      (extern-lang-open . 0)
      (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
      (objc-method-args-cont . c-lineup-ObjC-method-args)
      (objc-method-intro .
                         [0])
      (friend . 0)
      (cpp-define-intro c-lineup-cpp-define +)
      (cpp-macro-cont . +)
      (cpp-macro .
                 [0])
      (inclass . +)
      (stream-op . c-lineup-streamop)
      (arglist-cont-nonempty c-lineup-gcc-asm-reg c-lineup-arglist)
      (arglist-cont c-lineup-gcc-asm-reg 0)
      (arglist-intro . +)
      (catch-clause . 0)
      (else-clause . 0)
      (do-while-closure . 0)
      (label . 2)
      (access-label . -)
      (substatement-label . 2)
      (substatement . +)
      (statement-case-open . 0)
      (statement-case-intro . +)
      (statement-block-intro . +)
      (statement-cont . +)
      (statement . 0)
      (brace-entry-open . 0)
      (brace-list-entry . 0)
      (brace-list-intro . +)
      (brace-list-close . 0)
      (brace-list-open . 0)
      (block-close . 0)
      (inher-cont . c-lineup-multi-inher)
      (inher-intro . +)
      (member-init-cont . c-lineup-multi-inher)
      (member-init-intro . +)
      (annotation-var-cont . +)
      (annotation-top-cont . 0)
      (topmost-intro-cont . c-lineup-topmost-intro-cont)
      (topmost-intro . 0)
      (knr-argdecl . 0)
      (func-decl-cont . +)
      (inline-close . 0)
      (inline-open . +)
      (class-close . 0)
      (class-open . 0)
      (defun-block-intro . +)
      (defun-close . 0)
      (defun-open . 0)
      (string . c-lineup-dont-change)
      (arglist-close . c-lineup-arglist)
      (substatement-open . 0)
      (case-label . 0)
      (block-open . 0)
      (c . 1)
      (comment-intro . 0)
      (knr-argdecl-intro . -))
     (c-cleanup-list scope-operator brace-else-brace brace-elseif-brace brace-catch-brace empty-defun-braces list-close-comma defun-close-semi)
     (c-hanging-semi&comma-criteria c-semi&comma-no-newlines-before-nonblanks)
     (c-hanging-colons-alist
      (member-init-intro before)
      (inher-intro)
      (case-label after)
      (label after)
      (access-label after))
     (c-hanging-braces-alist
      (substatement-open after)
      (brace-list-open after)
      (brace-entry-open)
      (defun-open after)
      (class-open after)
      (inline-open after)
      (block-open after)
      (block-close . c-snug-do-while)
      (statement-case-open after)
      (substatement after))
     (c-comment-only-line-offset . 0)
     (c-tab-always-indent . t)
     (f3-before-args "-not" "(" "-ipath" "*.git*" "-or" "-ipath" "*.pants.d*" ")")
     (js2-basic-offset . 4)
     (no-gfm)
     (Syntax . ANSI-Common-Lisp)
     (Base . 10)
     (no-gfm . t)
     (major-mode . sh-mode)
     (TeX-master . "proposal")
     (add-log-time-format lambda nil
                          (progn
                            (setq tz
                                  (getenv "TZ"))
                            (setq time
                                  (format-time-string "%a %b %e %H:%M:%S %Z %Y"
                                                      (current-time)))
                            (set-time-zone-rule tz)
                            time))
     (destroy-whitespace)
     (nil)
     (flycheck-mode)))
 '(save-place-file "(expand-file-name \"saveplace\" init-home-folder-dir)")
 '(save-place-limit nil)
 '(save-place-mode t)
 '(save-place-save-skipped nil)
 '(save-place-version-control 'nospecial)
 '(save-some-buffers-default-predicate
   '(lambda nil
      (not
       (string-match-p "\\`\\*.*\\*\\'"
                       (buffer-name)))))
 '(scalable-fonts-allowed t)
 '(scroll-bar-mode nil)
 '(scroll-conservatively 10000)
 '(scroll-preserve-screen-position 1)
 '(scroll-step 1)
 '(search-default-mode 'char-fold-to-regexp)
 '(sh-basic-offset 2)
 '(shift-select-mode t)
 '(show-paren-mode t)
 '(show-trailing-whitespace t)
 '(smart-tab-completion-functions-alist '((lisp-mode . slime-complete-symbol)))
 '(smart-tab-default-functions-alist
   '((org-mode . org-cycle)
     (markdown-mode . toggle-subtree-markdown)))
 '(smart-tab-disabled-major-modes nil)
 '(smart-tab-using-hippie-expand t)
 '(text-quoting-style 'grave)
 '(timer-max-repeats 2)
 '(tool-bar-mode nil)
 '(track-eol t)
 '(transient-mark-mode t)
 '(truncate-lines t)
 '(undo-outer-limit 5000000)
 '(undo-tree-auto-save-history t)
 '(undo-tree-enable-undo-in-region nil)
 '(undo-tree-visualizer-diff t)
 '(undo-tree-visualizer-timestamps t)
 '(version-control t)
 '(visible-bell t)
 '(warning-suppress-log-types '((comp) (undo discard-info)))
 '(warning-suppress-types '((undo discard-info)))
 '(window-divider-default-bottom-width 3)
 '(window-divider-default-places t)
 '(window-divider-default-right-width 3)
 '(window-divider-mode nil)
 '(woman-fill-frame nil)
 '(woman-imenu t)
 '(words-include-escapes t)
 '(x-stretch-cursor t)
 '(xmllint-pretty-level 2)
 '(yank-pop-change-selection t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :extend nil :stipple nil :background "black" :foreground "green" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 100 :width normal :foundry "YOFo" :family "Telegrama"))))
 '(bold-italic ((t (:family "Telegrama Italic"))))
 '(italic ((t (:family "Telegrama Italic"))))
 '(variable-pitch ((t (:family "Ancho")))))
